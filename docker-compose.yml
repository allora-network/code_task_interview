services:
  postgres:
    container_name: postgres_db
    hostname: postgres_db
    networks: [app_network]
    image: postgres:15.4
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d/
    ports:
      - '5432:5432'
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: coding_task

  kafka:
    image: apache/kafka:3.8.1
    hostname: kafka
    container_name: kafka
    networks: [app_network]
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
    healthcheck:
      test: kafka-broker-api-versions.sh --bootstrap-server localhost:9092 || exit 1
      interval: 10s
      retries: 25
      start_period: 20s

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka_ui
    hostname: kafka_ui
    networks: [app_network]
    ports:
      - "8080:8080"
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092

  backend:
    build:
      context: ./backend/rest-api
      dockerfile: Dockerfile
    container_name: backend
    hostname: backend
    networks: [app_network]
    ports:
      - "3001:3001"
    volumes:
      - ./backend/rest-api:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - PORT=3001

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    hostname: frontend
    networks: [app_network]
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:3001
    depends_on:
      - backend

networks:
  app_network:
    driver: bridge
